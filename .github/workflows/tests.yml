name: Tests

on: 
  push:
    paths:
      - '.github/workflows/tests.yml'
      - 'docker/local/api/**'
      - 'src/**'  
      - 'requirements/**'
      - 'tests/unit_tests/**'
      - 'tests/functional_tests/**'
      - 'auto_builders/**'      
  pull_request:
    paths:
      - '.github/workflows/tests.yml'
      - 'docker/local/api/**'
      - 'src/**'  
      - 'requirements/**'
      - 'tests/unit_tests/**'
      - 'tests/functional_tests/**'
      - 'auto_builders/**'  

jobs:
  lint_with_flake8:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors
        flake8 . --count --select=E9,F63,F7 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
  unit-test-ubuntu-latest:
    needs: lint_with_flake8

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.7, 3.8]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest
        pip install -r requirements/api.txt
        pip install -r requirements/gui.txt
    - name: Test with pytest
      run: |
        pytest tests/unit_tests
    - name: Archive logs
      uses: actions/upload-artifact@v3
      with:
        name: log-report
        path: src/logs/*.log      
  
  unit-test-macos-latest:
    needs: lint_with_flake8

    runs-on: macos-latest
    strategy:
      matrix:
        python-version: [3.7, 3.8]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest
        pip install -r requirements/api.txt
        pip install -r requirements/gui.txt
    - name: Test with pytest
      run: |
        pytest tests/unit_tests
    - name: Archive logs
      uses: actions/upload-artifact@v3
      with:
        name: log-report
        path: src/logs/*.log           
  unit-test-windows-latest:
    needs: lint_with_flake8

    runs-on: windows-latest
    strategy:
      matrix:
        python-version: [3.7, 3.8]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest
        pip install -r requirements/api.txt
        pip install -r requirements/gui.txt
    - name: Test with pytest
      run: |
        pytest tests/unit_tests
    - name: Archive logs
      uses: actions/upload-artifact@v3
      with:
        name: log-report
        path: src/logs/*.log           

  functional-test-local-ubuntu-latest:
    needs: [lint_with_flake8, unit-test-ubuntu-latest, unit-test-macos-latest, unit-test-windows-latest]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8]
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies and run tests
      run: |
        pip install pytest
        cd ..
        pytest Decentra-Network/tests/functional_tests/local/test_decentra_network_local.py
