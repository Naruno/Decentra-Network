name: Tests

on: 
  push:
    paths:
      - '.github/workflows/tests.yml'
      - 'docker/**'
      - 'setups/**'
      - 'naruno/**'  
      - 'requirements/**'
      - 'tests/**'
      - 'auto_builders/**'
  pull_request:
    paths:
      - '.github/workflows/tests.yml'
      - 'docker/**'
      - 'setups/**'
      - 'naruno/**'  
      - 'requirements/**'
      - 'tests/**'
      - 'auto_builders/**'   
  release:
    types: [published]   
  workflow_dispatch:

concurrency: 
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event }}
  cancel-in-progress: true
jobs:
  lint_with_flake8:

    runs-on: ubuntu-latest
    environment: LINT Tests 
    strategy:
      matrix:
        python-version: [3.8]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - uses: actions/cache@v2
      with:
        path: ${{ env.pythonLocation }}
        key: ${{ runner.os }}-${{ env.pythonLocation }}-flake8

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors
        flake8 . --count --select=E9,F63,F7 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
  unit-test-ubuntu-latest:
    needs: lint_with_flake8

    runs-on: ubuntu-latest
    environment: UNIT Tests 
    strategy:
      matrix:
        python-version: [3.8]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - uses: actions/cache@v2
      with:
        path: ${{ env.pythonLocation }}
        key: ${{ runner.os }}-${{ env.pythonLocation }}-${{ hashFiles('requirements/api.txt') }}-${{ hashFiles('requirements/gui.txt') }}-${{ hashFiles('requirements/tests.txt') }}-${{ hashFiles('requirements/remote_app.txt')

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest
        pip install -r requirements/api.txt
        pip install -r requirements/gui.txt
        pip install -r requirements/tests.txt
    - name: Test with pytest
      run: |
        pytest tests/unit_tests -v --profile
    - name: Archive logs
      uses: actions/upload-artifact@v3
      with:
        name: log-report-unit-test-ubuntu-latest
        path: naruno/logs/*.log      

    - name: Archive Profile
      uses: actions/upload-artifact@v3
      with:
        name: profile-report-unit-test-ubuntu-latest
        path: prof/*
      
  unit-test-macos-latest:
    needs: lint_with_flake8

    runs-on: macos-latest
    environment: UNIT Tests
    strategy:
      matrix:
        python-version: [3.8]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - uses: actions/cache@v2
      with:
        path: ${{ env.pythonLocation }}
        key: ${{ runner.os }}-${{ env.pythonLocation }}-${{ hashFiles('requirements/api.txt') }}-${{ hashFiles('requirements/gui.txt') }}-${{ hashFiles('requirements/tests.txt') }}-${{ hashFiles('requirements/remote_app.txt')

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest
        pip install -r requirements/api.txt
        pip install -r requirements/gui.txt
        pip install -r requirements/tests.txt
    - name: Test with pytest
      run: |
        pytest tests/unit_tests -v --profile
    - name: Archive logs
      uses: actions/upload-artifact@v3
      with:
        name: log-report-unit-test-macos-latest
        path: naruno/logs/*.log 
    - name: Archive Profile
      uses: actions/upload-artifact@v3
      with:
        name: profile-report-unit-test-macos-latest
        path: prof/*                   
  unit-test-windows-latest:
    needs: lint_with_flake8

    runs-on: windows-latest
    environment: UNIT Tests
    strategy:
      matrix:
        python-version: [3.8]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - uses: actions/cache@v2
      with:
        path: ${{ env.pythonLocation }}
        key: ${{ runner.os }}-${{ env.pythonLocation }}-${{ hashFiles('requirements/api.txt') }}-${{ hashFiles('requirements/gui.txt') }}-${{ hashFiles('requirements/tests.txt') }}-${{ hashFiles('requirements/remote_app.txt')

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest
        pip install -r requirements/api.txt
        pip install -r requirements/gui.txt
        pip install -r requirements/tests.txt
    - name: Test with pytest
      run: |
        pytest tests/unit_tests/ -v --profile
    - name: Archive logs
      uses: actions/upload-artifact@v3
      with:
        name: log-report-unit-test-windows-latest
        path: naruno/logs/*.log           

    - name: Archive Profile
      uses: actions/upload-artifact@v3
      with:
        name: profile-report-unit-test-windows-latest
        path: prof/*    
 

  functional-test-local-ubuntu-latest:
    needs: lint_with_flake8
    runs-on: ubuntu-latest
    environment: FUNCTIONAL Tests
    strategy:
      matrix:
        python-version: [3.8]
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - uses: actions/cache@v2
      with:
        path: ${{ env.pythonLocation }}
        key: ${{ runner.os }}-${{ env.pythonLocation }}-${{ hashFiles('tests/functional_tests/local/test_naruno_local.py') }}

    - name: Install dependencies
      run: |
        pip install -r requirements/tests.txt
    - name: Test with pytest
      run: |      
        cd ..
        pytest Naruno/tests/functional_tests/local/test_naruno_local.py



  functional-test-docker-ubuntu-latest:
    needs: lint_with_flake8
    runs-on: ubuntu-latest
    environment: FUNCTIONAL Tests
    strategy:
      matrix:
        python-version: [3.8]
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - uses: actions/cache@v2
      with:
        path: ${{ env.pythonLocation }}
        key: ${{ runner.os }}-${{ env.pythonLocation }}-${{ hashFiles('tests/functional_tests/docker/test_naruno_docker.py') }}

    - name: Install dependencies
      run: |
        pip install -r requirements/tests.txt
    - name: Test with pytest
      run: |        
        cd ..
        docker build -t ghcr.io/naruno/api -f Naruno/docker/local/api/Dockerfile .
        pytest Naruno/tests/functional_tests/docker/test_naruno_docker.py


    - name: Copy out file from volume
      run: |
        mkdir -p /home/runner/work/Naruno/Naruno-0/naruno
        mkdir -p /home/runner/work/Naruno/Naruno-1/naruno
        mkdir -p /home/runner/work/Naruno/Naruno-2/naruno
        sudo cp -r /var/lib/docker/volumes/naruno-logs/_data/  /home/runner/work/Naruno/Naruno-0/naruno/logs
        sudo cp -r /var/lib/docker/volumes/naruno-logs-0/_data/  /home/runner/work/Naruno/Naruno-1/naruno/logs



