name: Builds

on: 
  push:
    paths:
      - '.github/workflows/builds.yml'
      - 'decentra_network/**'  
      - 'requirements/**'  
      - 'API.spec'
      - 'CLI.spec'
      - 'GUI-win32.spec'
      - 'buildozer.spec'
      - 'recipes/**'
      - '.ci/osx_ci.sh'

  pull_request:
    paths:
      - '.github/workflows/builds.yml'
      - 'decentra_network/**'  
      - 'requirements/**'
      - 'API.spec'
      - 'CLI.spec'
      - 'GUI-win32.spec'    
      - 'buildozer.spec'
      - 'recipes/**'    
      - '.ci/osx_ci.sh'   
  release:
    types: [published]
  workflow_dispatch:

jobs:

  build-cli-linux:

    runs-on: ubuntu-latest
    environment: Builds       
    strategy:
      matrix:
        python-version: [3.8]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
    - name: PyInstaller
      run: |
        pyinstaller CLI.spec

    - name: Zip
      run: |
        cd dist
        zip -r cli_linux_${{ github.event.release.tag_name }} Decentra-Network-CLI/
    
    - uses: actions/upload-artifact@v2
      with:
        path: dist/cli_linux_${{ github.event.release.tag_name }}.zip
    
    - uses: AButler/upload-release-assets@v2.0
      if: github.event_name == 'release'
      with:
        repo-token: ${{ secrets.GITHUB_TOKEN }}
        files: 'dist/cli_linux_${{ github.event.release.tag_name }}.zip'

  build-cli-macos:

    runs-on: macos-latest
    environment: Builds       
    strategy:
      matrix:
        python-version: [3.8]
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
    - name: PyInstaller
      run: |
        pyinstaller CLI.spec
    - name: Zip
      run: |
        cd dist
        zip -r cli_macos_${{ github.event.release.tag_name }} Decentra-Network-CLI/
    - uses: actions/upload-artifact@v2
      with:
        path: dist/cli_macos_${{ github.event.release.tag_name }}.zip
    - uses: AButler/upload-release-assets@v2.0
      if: github.event_name == 'release'
      with:
        repo-token: ${{ secrets.GITHUB_TOKEN }}
        files: 'dist/cli_macos_${{ github.event.release.tag_name }}.zip'


  build-cli-windows:

    runs-on: windows-latest
    environment: Builds       
    strategy:
      matrix:
        python-version: [3.8]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
    - name: PyInstaller
      run: |
        pyinstaller CLI.spec

    - name: Zip
      run: |
        cd dist
        Compress-Archive Decentra-Network-CLI/ cli_win32_${{ github.event.release.tag_name }}.zip
    


    - uses: actions/upload-artifact@v2
      with:
        path: dist/cli_win32_${{ github.event.release.tag_name }}.zip       

    - uses: AButler/upload-release-assets@v2.0
      if: github.event_name == 'release'
      with:
        repo-token: ${{ secrets.GITHUB_TOKEN }}
        files: 'dist/cli_win32_${{ github.event.release.tag_name }}.zip'


  build-api-linux:

    runs-on: ubuntu-latest
    environment: Builds       
    strategy:
      matrix:
        python-version: [3.8]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        python3 -m venv venv
        source venv/bin/activate
        pip3 install -r requirements/api.txt        
    - name: PyInstaller
      run: |
        pyinstaller API.spec


    - name: Zip
      run: |
        cd dist
        zip -r api_linux_${{ github.event.release.tag_name }} Decentra-Network-API/
    

    - uses: actions/upload-artifact@v2
      with:
        path: dist/api_linux_${{ github.event.release.tag_name }}.zip

    - uses: AButler/upload-release-assets@v2.0
      if: github.event_name == 'release'
      with:
        repo-token: ${{ secrets.GITHUB_TOKEN }}
        files: 'dist/api_linux_${{ github.event.release.tag_name }}.zip'


  build-api-macos:

    runs-on: macos-latest
    environment: Builds       
    strategy:
      matrix:
        python-version: [3.8]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        python3 -m venv venv
        source venv/bin/activate
        pip3 install -r requirements/api.txt        
    - name: PyInstaller
      run: |
        pyinstaller API.spec

    - name: Zip
      run: |
        cd dist
        zip -r api_macos_${{ github.event.release.tag_name }} Decentra-Network-API/
    

    - uses: actions/upload-artifact@v2
      with:
        path: dist/api_macos_${{ github.event.release.tag_name }}.zip

    - uses: AButler/upload-release-assets@v2.0
      if: github.event_name == 'release'
      with:
        repo-token: ${{ secrets.GITHUB_TOKEN }}
        files: 'dist/api_macos_${{ github.event.release.tag_name }}.zip'

  build-api-windows:

    runs-on: windows-latest
    environment: Builds       
    strategy:
      matrix:
        python-version: [3.8]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        python -m venv venv
        venv\Scripts\activate.bat
        pip3 install -r requirements/api.txt          
    - name: PyInstaller
      run: |
        pyinstaller API.spec

    - name: Zip
      run: |
        cd dist
        Compress-Archive Decentra-Network-API/ api_win32_${{ github.event.release.tag_name }}.zip
    

    - uses: actions/upload-artifact@v2
      with:
        path: dist/api_win32_${{ github.event.release.tag_name }}.zip 


    - uses: AButler/upload-release-assets@v2.0
      if: github.event_name == 'release'
      with:
        repo-token: ${{ secrets.GITHUB_TOKEN }}
        files: 'dist/api_win32_${{ github.event.release.tag_name }}.zip'

  build-gui-windows:

    runs-on: windows-latest
    environment: Builds       
    strategy:
      matrix:
        python-version: [3.8]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip3 install pyinstaller==4.10
        pip3 install pyinstaller-hooks-contrib==2022.3 
        python -m venv venv
        venv\Scripts\activate.bat
        pip3 install -r requirements/gui.txt
              
    - name: PyInstaller
      run: |
        $env:KIVY_GL_BACKEND="angle_sdl2"
        pyinstaller GUI-win32.spec

    - name: Zip
      run: |
        cd dist
        Compress-Archive Decentra-Network-GUI/ gui_win32_${{ github.event.release.tag_name }}.zip
    

    - uses: actions/upload-artifact@v2
      with:
        path: dist/gui_win32_${{ github.event.release.tag_name }}.zip

    - uses: AButler/upload-release-assets@v2.0
      if: github.event_name == 'release'
      with:
        repo-token: ${{ secrets.GITHUB_TOKEN }}
        files: 'dist/gui_win32_${{ github.event.release.tag_name }}.zip'

  build-api-android:
    runs-on: ubuntu-latest
    environment: Builds    
    strategy:
      matrix:
        python-version: [3.8]    
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # used to cache dependencies with a timeout
      - name: Get Date
        id: get-date
        run: |
          echo "::set-output name=date::$(/bin/date -u "+%Y%m%d")"
        shell: bash

      - name: Cache Buildozer global directory
        uses: actions/cache@v2
        with:
          path: .buildozer_global
          key: buildozer-global-${{ hashFiles('buildozer.spec') }} # Replace with your path

      - uses: actions/cache@v2
        with:
          path: .buildozer
          key: ${{ runner.os }}-${{ steps.get-date.outputs.date }}-${{ hashFiles('buildozer.spec') }}
        
      - name: Build with Buildozer
        uses: ArtemSBulgakov/buildozer-action@v1
        id: buildozer
        with:
          command: buildozer --profile api android debug

      - name: Zip
        run: sudo zip -r api_android_${{ github.event.release.tag_name }} ${{ steps.buildozer.outputs.filename }} 
      

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          path: api_android_${{ github.event.release.tag_name }}.zip

      - uses: AButler/upload-release-assets@v2.0
        if: github.event_name == 'release'
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}        
          files: 'api_android_${{ github.event.release.tag_name }}.zip'


  build-gui-android:
    runs-on: ubuntu-latest
    environment: Builds    
    strategy:
      matrix:
        python-version: [3.8]    
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        
      # used to cache dependencies with a timeout
      - name: Get Date
        id: get-date
        run: |
          echo "::set-output name=date::$(/bin/date -u "+%Y%m%d")"
        shell: bash

      - name: Cache Buildozer global directory
        uses: actions/cache@v2
        with:
          path: .buildozer_global
          key: buildozer-global-${{ hashFiles('buildozer.spec') }} # Replace with your path

      - uses: actions/cache@v2
        with:
          path: .buildozer
          key: ${{ runner.os }}-${{ steps.get-date.outputs.date }}-${{ hashFiles('buildozer.spec') }}
        
      - name: Build with Buildozer
        uses: ArtemSBulgakov/buildozer-action@v1
        id: buildozer
        with:
          buildozer_version: 1.4.0
          command: buildozer --profile gui android debug

      - name: Zip
        run: sudo zip -r gui_android_${{ github.event.release.tag_name }} ${{ steps.buildozer.outputs.filename }} 
      

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          path: gui_android_${{ github.event.release.tag_name }}.zip

      - uses: AButler/upload-release-assets@v2.0
        if: github.event_name == 'release'
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}        
          files: 'gui_android_${{ github.event.release.tag_name }}.zip'

  build-api-ios:
    runs-on: macos-latest
    environment: Builds       
    strategy:
      matrix:
        python-version: [3.8]
    steps:
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - uses: actions/checkout@v2
      - name: Setup environment
        run: |
          source .ci/osx_ci.sh
          arm64_set_path_and_python_version ${{ matrix.python }}
          pip install -e .
          pip install Cython cookiecutter pbxproj buildozer==1.4.0

      - name: Check buildozer installation
        run: |
          source .ci/osx_ci.sh
          arm64_set_path_and_python_version ${{ matrix.python }}
          buildozer --help

      - name: Initialize buildozer in project folder
        run: |
          source .ci/osx_ci.sh
          arm64_set_path_and_python_version ${{ matrix.python }}
          buildozer init

      - name: Install dependencies
        run: |
          source .ci/osx_ci.sh
          arm64_set_path_and_python_version ${{ matrix.python }}
          brew install autoconf automake libtool pkg-config

      - name: Get Date
        id: get-date
        run: |
          echo "::set-output name=date::$(/bin/date -u "+%Y%m%d")"
        shell: bash

      - name: Cache Buildozer global directory
        uses: actions/cache@v2
        with:
          path: .buildozer_global
          key: buildozer-global-${{ hashFiles('buildozer.spec') }} # Replace with your path

      - uses: actions/cache@v2
        with:
          path: .buildozer
          key: ${{ runner.os }}-${{ steps.get-date.outputs.date }}-${{ hashFiles('buildozer.spec') }}
        
      - name: buildozer ios debug
        run: |
          source .ci/osx_ci.sh
          arm64_set_path_and_python_version ${{ matrix.python }}
          buildozer --profile api ios debug

      - name: Zip
        run: sudo zip -r api_ios_${{ github.event.release.tag_name }} bin/
        

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          path: api_ios_${{ github.event.release.tag_name }}.zip

      - uses: AButler/upload-release-assets@v2.0
        if: github.event_name == 'release'
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}        
          files: 'api_ios_${{ github.event.release.tag_name }}.zip'
